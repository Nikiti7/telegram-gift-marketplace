import asyncio
import json
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    CallbackQueryHandler, MessageHandler, filters,
    ConversationHandler
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import requests
import datetime
import telegram
import time
import gspread
from requests.exceptions import ConnectionError
from oauth2client.service_account import ServiceAccountCredentials
import logging
import sqlite3
import uuid

logging.basicConfig(level=logging.INFO)

def get_db_connection():
    return pymysql.connect(
        host="",
        user="",
        password="",
        database="",
        charset="utf8mb4",
        cursorclass=pymysql.cursors.DictCursor,
        autocommit=True
    )

def base36decode(s):
    try:
        return int(s, 36)
    except ValueError:
        return None

async def log_error(context, error_message):
    logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_message}")
    await context.bot.send_message(chat_id=588896602, text=f"–û—à–∏–±–∫–∞: {error_message}")

from telegram.error import TimedOut, NetworkError
import asyncio

async def send_telegram_message(context, chat_id, text):
    try:
        await context.bot.send_message(chat_id=chat_id, text=text)
    except TimedOut:
        print("–ó–∞–ø—Ä–æ—Å –∫ API Telegram –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ø–æ —Ç–∞–π–º–∞—É—Ç—É.")
        await asyncio.sleep(5)
        await send_telegram_message(context, chat_id, text)
    except NetworkError as ne:
        print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {ne}")
    except Exception as e:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

import time

ADMIN_CHAT_ID = 588896602

import asyncio
import datetime

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    telegram_id = str(user.id)

    if update.message and update.message.chat.type in ["group", "supergroup"]:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–æ –º–Ω–æ–π."
        )
        return
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute('SELECT telegram_id FROM users WHERE telegram_id = ?', (telegram_id,))
    existing_user = cursor.fetchone()

    if existing_user:
        await main_menu(update, context)
    else:
        message_text = (
            """üéÅ –ü—Ä–∏–≤–µ—Ç! –¢—ã –≤ NFT Gift Market ‚Äî –º–µ—Å—Ç–µ, –≥–¥–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –æ–±—Ä–µ—Ç–∞—é—Ç –≤—Ç–æ—Ä—É—é –∂–∏–∑–Ω—å.
üíé –ü–æ–∫—É–ø–∞–π –∏ –ø—Ä–æ–¥–∞–≤–∞–π NFT-–ø–æ–¥–∞—Ä–∫–∏ –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ.
üöÄ –í—Å—ë –ø—Ä–æ—Å—Ç–æ: –≤—ã–±–µ—Ä–∏ ‚Äî –≤—ã—Å—Ç–∞–≤–∏ ‚Äî –∑–∞—Ä–∞–±–æ—Ç–∞–π.

üîê –í—Ö–æ–¥ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–º–æ—Ä–æ—á–µ–∫.
üß† –£–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏.
üî• –õ–∏–º–∏—Ç–∫–∏, –¥—Ä–æ–ø—ã –∏ —Ä–µ–¥–∫–æ—Å—Ç–∏ ‚Äî –≤—Å–µ–≥–¥–∞ –ø–æ–¥ —Ä—É–∫–æ–π.

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ñ–º–∏ OPEN —Å–Ω–∏–∑—É –∏ –ø–æ–≥–Ω–∞–ª–∏!"""
        )
        chat_id = update.effective_chat.id
        message = await context.bot.send_message(
            chat_id=chat_id,
            text=message_text,
        )

        registration_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute('''
        INSERT INTO Users (name, username, telegram_id, registrationdate)
        VALUES (?, ?, ?, ?)
        ''', (user.full_name, user.username or "", telegram_id, registration_date))
        conn.commit()

        await asyncio.sleep(5)

        await main_menu(update, context)

    if update.message:
        await update.message.delete()

    conn.close()

import string
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import CallbackContext

def to_base36(num: int) -> str:
    if num < 0:
        raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è")
    
    chars = string.digits + string.ascii_uppercase
    base36 = ''
    
    if num == 0:
        return '0'
    
    while num > 0:
        num, i = divmod(num, 36)
        base36 = chars[i] + base36
    
    return base36

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    user_id = user.id
    try:
        obfuscated_id = to_base36(user_id)
    except ValueError as ve:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è ID: {ve}")
        return
    shopurl = f"https://fluxgifts.ru.tuna.am/user/{obfuscated_id}"
    channel_url = "https://t.me/sickboips"
    chat_url = "https://t.me/sickboips"
    support_url = "https://t.me/sickboips"

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT telegram_id FROM admins WHERE telegram_id = ?', (str(user.id),))
    is_admin = cursor.fetchone() is not None
    conn.close()


    keyboard = [
        [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –º–∞—Ä–∫–µ—Ç", web_app=WebAppInfo(url=shopurl))],
        [InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")],
        [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=channel_url)],
        [InlineKeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É", url=chat_url)],
        [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url=support_url)],
    ]
    if is_admin:
        admin_url = f"https://fluxgifts.ru.tuna.am/admin/{obfuscated_id}"
        keyboard.append([InlineKeyboardButton("–ê–¥–º–∏–Ω-–º–µ–Ω—é", web_app=WebAppInfo(url=admin_url))])

    reply_markup = InlineKeyboardMarkup(keyboard)

    image_url = "https://sun9-41.userapi.com/impg/JV0FAQZqkz5gQYfEjRWMdvUpgc0XWu6Lg_WwwQ/jeM24YowtSs.jpg?size=500x500&quality=95&sign=f52ef6636e5dccf1f84d89a36357b082&type=album"

    if update.callback_query:
        message = await update.callback_query.message.reply_photo(
            photo=image_url,
            caption="–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞—Ä–∫–µ—Ç, –Ω–∞–∂–º–∏ OPEN —Å–Ω–∏–∑—É!",
            reply_markup=reply_markup
        )
    else:
        message = await update.message.reply_photo(
            photo=image_url,
            caption="–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞—Ä–∫–µ—Ç, –Ω–∞–∂–º–∏ OPEN —Å–Ω–∏–∑—É!",
            reply_markup=reply_markup
        )
    if 'last_message' in context.user_data:
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data['last_message']
            )
        except:
            pass
    context.user_data['last_message'] = message.message_id

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == 'check_subscription':
        await check_subscription(update, context)
    elif query.data == 'main_menu':
        await main_menu(update, context)
    elif query.data == 'info':
        await query.message.reply_text(
            "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä–∫–µ—Ç–µ:\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å NFT-–ø–æ–¥–∞—Ä–∫–∏. –í—Å—ë –ø—Ä–æ—Å—Ç–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ!"
        )
    elif query.data == 'start':
        await start(update, context)

async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == 'my_orders':
        await my_orders(update, context)
    elif query.data == 'draw':
        await draw(update, context)
    elif query.data == 'main_menu':
        await main_menu(update, context)

import datetime
import pytz
import numpy as np
import matplotlib.pyplot as plt
import tempfile
import os
import calendar
from telegram import Update
from telegram.ext import ContextTypes
orderschat = 588896602

async def user_response_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    logging.info(f"Message from {user_id}")
    
    if update.message.chat.type in ["group", "supergroup"]:
        return

    if 'awaiting_responses' in context.bot_data and context.bot_data['awaiting_responses'].get(user_id):
        try:
            await context.bot.forward_message(chat_id=ADMIN_CHAT_ID2, from_chat_id=update.effective_chat.id, message_id=update.message.message_id)
            logging.info(f"Message {user_id} reposted to admin (broadcast).")

            context.bot_data['awaiting_responses'][user_id] = False
            await update.message.reply_text("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –°–ø–∞—Å–∏–±–æ!")

        except Exception as e:
            logging.error(f"Error broadcast-message {user_id}: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return


    logging.info(f"Message {user_id} not in 'responses' and 'wishes'.")

    user_text = update.message.text.strip()
    chatgpt_answer = generate_chatgpt_response(user_text)

    await update.message.reply_text(chatgpt_answer)

def main():
    application = ApplicationBuilder().token("xxx").build()

    application.add_handler(CommandHandler("start", start))

    application.add_handler(CallbackQueryHandler(button_handler, pattern='^(check_subscription|main_menu)$'))
    application.add_handler(CallbackQueryHandler(main_menu_handler, pattern='^(my_orders|cart|draw|main_menu)$'))
    application.add_handler(CallbackQueryHandler(start, pattern='^start$'))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, user_response_handler))

    application.run_polling()

if __name__ == '__main__':
    main()
